4. 트리(Tree) : 비선형 계층구조를 표현하는 자료구조다.
    • 트리는 노드들의 집합으로, 하나의 루트 노드와 0 개 이상의 부분 트리(subtree)로 구성되어 있다. 
    • 각 부분 트리는 또한 0개 이상의 부분트리(subtree)로 구성되어 있다. 

    ▸ 이진 트리(Binary Tree) : 이진 트리는 최대 두 개의 자신을 가질 수 있는 특별한 형태의 트리다. 각각의 노드는 최대 2개의 자식 
    노드를 가지며, 왼쪽 자식과 오른쪽 자식으로 부른다. 

    1) 정 이진 트리(Full Binary Tree) : 모든 레벨(깊이)에서 노드가 꽉 찬 이진트리다.
    모든 부분 트리들이 2개의 자식노드를 가지고 있으며 같은 깊이에 존재한다. 2^n - 1개가 같은 깊이에 존재해야 한다.

    2) 완전 이진 트리(Complete Binary Tree) : 마지막 레벨을 제외하면 모든 노드가 완전히 채워져있으며, 마지막 단계에서도 왼쪽부터 
    순서대로 채워져 있는 이진트리다.

    3) 평향 이진 트리(Skewed Binart Tree) : 각각의 내부 노드들이 하나만 있는 경우다. 왼쪽으로 치우치면 Left Skewed, 오른쪽으로 
    치우치면 Right Skewed라고 부른다. 

    4) 이진 탐색 트리(Binary Search Tree) : 각 노드의 왼쪽 서브트리에 있는 모든 노드의 값이 해당 노드의 값보다 작고, 오른쪽 서브트리에 
    있는 모든 노드의 값이 해당 노드의 값보다 큰 구조로 설계된 이진 트리다. 
    이러한 속성때문에 BST 검색, 삽입, 삭제 등 연산을 평균적으로 O(log n) 시간 복잡도에서 처리할 수 있다. 

        ▸ 검색(Search) : 루트에서 시작해서 찾으려는 값이 현재 노드와 같으면 해당 노드값을 반환한다. 찾으려는 값이 현재 노드값보다 작으면
        왼쪽으로, 크면 오른쪽으로 이동한다. 

        ▸ 삽입(Insertion) : 루트에서 시작해서 삽입하혀는 값이 현재 값보다 작으면 왼쪽, 크면 오른쪽으로 이동한다. 

        ▸ 삭제(Deletion) : 
            - 삭제할 노드가 리프노드(최하위 노드)인 경우, 단순 노드 삭제.
            - 삭제할 노드가 자식 노드를 하나 가지고 있을 경우, 그 위치에 자식 노드를 올린다. 
            - 삭제할 노드가 자식 노드를 두개 가지고 있을 경우, 보통은 오른쪽 중 최소값을 찾아서 그 위치로 올린다. 
        


5. 해시 테이블 (Hash Table) :